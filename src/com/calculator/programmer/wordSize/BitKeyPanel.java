package com.calculator.programmer.wordSize;

import com.amath.advacedmath.programmer.WordSize;
import com.calculator.programmer.ProgrammerFrame;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class BitKeyPanel extends javax.swing.JPanel {

    QuadrantBitKeyPanel[][] fourBitKeyPanels = new QuadrantBitKeyPanel[4][4];

    public BitKeyPanel() {
        initComponents();
        for (int i = 0; i < 64; i += 16) {
            for (int j = 0; j < 16; j += 4) {
                fourBitKeyPanels[i / 16][j / 4] = new QuadrantBitKeyPanel(i + j);
            }
        }
        for (int i = 3; i >= 0; i--) {
            QuadrantBitKeyPanel[] qbps = fourBitKeyPanels[i];
            JPanel p = new JPanel();
            p.setLayout(new BoxLayout(p, BoxLayout.LINE_AXIS));
            for (int j = 3; j >= 0; j--) {
                QuadrantBitKeyPanel qbp = qbps[j];
                p.add(qbp);
            }
            add(p);
        }
    }

    public void setType(int type) {
        for (int i = 0; i < 64; i += 16) {
            for (int j = 0; j < 16; j += 4) {
                QuadrantBitKeyPanel p = fourBitKeyPanels[i / 16][j / 4];
                p.enablePanel((i + j) <= type);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ProgrammerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Color background = new Color(30, 30, 30);
        Color background2 = new Color(50, 50, 50);
        Color foreground = new Color(200, 200, 200);
        UIManager.put("Button.background", background2);
        UIManager.put("Button.foreground", foreground);
        UIManager.put("Button.focusedBorderColor", background);
        UIManager.put("TextField.foreground", foreground);
        UIManager.put("ToggleButton.foreground", foreground);
//        UIManager.put("Button.font", new Font("Dialog",1,18));
        UIManager.put("TextField.background", background);
        UIManager.put("ToggleButton.background", background);
        UIManager.put("ToggleButton.selectedBackground", new Color(0, 8, 10));
        UIManager.put("Panel.background", background);
        UIManager.put("Frame.background", background);
        BitKeyPanel p = new BitKeyPanel();
        JFrame frame = new JFrame("Common number field");
        frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        frame.setBounds(200, 200, 300, 400);
        frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(new javax.swing.BoxLayout(frame.getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));
        frame.getContentPane().add(p);
        frame.pack();
        new Thread(() -> {
            double d = 0;
            while (d < 300) {
                d++;
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ProgrammerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            System.exit(0);
        }).start();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            frame.setVisible(true);
        });
    }

    public void setWordSize(WordSize ws) {
        for (int i = 0; i < 64; i += 16) {
            for (int j = 0; j < 16; j += 4) {
//                System.out.println(i+"|"+j);
                fourBitKeyPanels[i / 16][j / 4].enablePanel(ws.BITS > i + j);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
